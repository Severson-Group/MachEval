.. _docgen:

Documentation Generation and Hosting
===============================================

Automated generation of easily readable, user friendly, and indexed documentation makes a solid case for using the Sphinx tool 
for *MachEval*'s documentation needs. After generating the required documents, the corresponding files can be hosted on a 
platform online to share with a broader audience. The steps involved in this work flow are discussed below.

Using Sphinx
-----------------------------------------------

Sphinx is a tool that makes the creation of pretty, indexed documentation easy. One of the biggest advantages of using Sphinx 
with *MachEval* is its autodocs feature which creates documentation directly from the docstrings written within the code. A 
detailed explaination of setting up and running Sphinx on a system is provided `here <https://www.sphinx-doc.org/en/master/tutorial/index.html>`_. 
This `tutorial <https://techwritingmatters.com/documenting-with-sphinx-tutorial-intro-overview>`_ also provides a great intro 
to Sphinx and the reStructuredText (reST) markup language used by the tool. A general idea of the workflow involved in Sphinx 
doc generation is provided below:

1. Install Sphinx on your system with the following command - ``pip install Sphinx``. Users are recommended to install Sphinx
ver 1.8.5. The previous command can be modified as ``pip install Sphinx==1.8.5`` to install this specific version.

2. Navigate to the module for which documentation is to be generated. Creation of a ``docs`` folder within the module is 
recommended to segregate the documentation files from the rest of the module.  Run ``sphinx-quickstart`` command from within 
the docs folder. You will be asked to type in responses to certain prompts. Follow the instructions provided `here <https://techwritingmatters.com/documenting-with-sphinx-tutorial-part-1-setting-up>`_. 
Note that setting ``y`` for the autodoc prompt enables the automatic creation of documentation from docstrings. 

3. Ensure that the expected files and folders have been created. This includes the ``Makefile``, ``Windows command file`` (if 
you are on Windows), ``conf.py``, and the ``index.rst`` files.

4. Add additional documents if required. The ``index.rst`` file is the master documentation file. Modify this file as required to
change the documentation structure, add introdutory text, and more. This `link <https://techwritingmatters.com/documenting-with-sphinx-tutorial-part-2-implementation>`_ 
provides a good introduction to the ``index.rst`` file and on reST syntax.

5. Modify the ``conf.py`` file as required. Make sure the Python files for which documentation is to be generated can be
accessed from within this file. The theme of the HTML pages which will be generated can be set within this file as well. 
Refer to this `link <https://techwritingmatters.com/documenting-with-sphinx-tutorial-part-2-implementation>`_ for more 
information.

6. To create documentation from docstrings, run the ``sphinx-apidoc -o`` `command <https://www.sphinx-doc.org/en/master/man/sphinx-apidoc.html?highlight=sphinx%20apidoc>`_ 
from the Command Terminal. This command should be executed with the output and input directories as arguments 
``sphinx-apidoc -o out_dir in_dir``. Again, the input directory should be the folder where the Python files reside and the 
output folder will be the location of the ``index.rst`` file.

7. Finally, navigate to the docs folder from the Command / Anaconda Prompt terminal and run the ``make html`` command. Go
within the build folder, open the ``index.html`` file and ensure the documentation is as desired.

Hosting Documentation Online
-------------------------------------

After ensuring the documents generated by Sphinx are in order, the files can be hosted online for easily sharing the amazing
documentation you just created with the rest of the world. While there are many ways of achieving this, two methods, both of 
which involve integration with Github, are provided below.

Read the Docs
+++++++++++++++++++++++++++++++++++++

Read the Docs offers free, real-time updated, document hosting. Simply create an account on https://readthedocs.org/ and 
import the Git repository you wish to host documentation for. Refer to this link for more information on getting started with
Read the Docs. Pushing the HTML files on to Git is not required with this hosting platform as Read the Docs regenerates the
doc files everytime there is a git push. Only the source folder and the contents therein need to be updated as and when 
required. This ensures that the documentation remains updated always. 

Advantages

* Real-time document updation
* Pushing contents of the build folder on to Git is not required

Disadvantages

* Support for private Git repositories available only with Read the Docs for Business


Github Pages
+++++++++++++++++++++++++++++++++++++

Github Pages provides a way of hosting Github repositories on websites. This platform can also be used to host the
documentation generated with Sphinx. More information on Github Pages can be found `here <https://pages.github.com/>`_. 

In order to host Sphinx generated documentation on this platform, the HTML buiid files must be pushed onto Git. These files 
are usually placed within a different branch, typically call gh-pages, to segregate the code from the doc files. Github Pages
basically looks at the ``index.html`` file and re-creates the website from there.

Advantages

* Support for both public and private Git repositories available with Github Pro

Disadvantages

* HTML files must be built from the source .rst files and pushed to the repo each time there is any change in documentation, including changes to docstrings


