Inductance/Saliency Analyzer
########################################################################

This analyzer enables the inductance evaluation of an electric machine after running 2D FEA simulations using JMAG.

Model Background
****************

The inductance of a coil is the resistance to a change in the electric current flowing through it. The inductance of a coil
within an electric machine can come from multiple sources, including its own electric current as well as the electric current
flowing through other phases of the machine. Understanding the inductance characteristics of an electric machine leads to finding
any saliency that an electric machine rotor may have. In some electric machines, such as reluctance or induction machines,
saliency exists and aids in producing electromagnetic torque between the rotor and stator. This can be seen in the torque equation
for a 3-phase machine:

.. math::

    T &= \frac{3p}{2}[\psi_\text{pm} I_\text{q} + (L_\text{d} - L_\text{q}) I_\text{d} I_\text{q}] \\

* T. Vo-Duy, and M. C. Ta, *Encyclopedia of Electrical and Electronic Power Engineering*. Oxford: Elsevier, 2023.

where :math:`T` is calculated based on the rotor pole pairs :math:`p`, any permanent magnet flux :math:`\psi_\text{pm}`, the d- and 
q-axis currents :math:`I_\text{d,q}`, and the d- and q-axis inductances :math:`L_\text{d,q}`. In this equation the first term 
:math:`\frac{3p}{2} \psi_\text{pm} I_\text{q}` represents the torque based on the permanent magnet flux and the second term
:math:`\frac{3p}{2} (L_\text{d} - L_\text{q}) I_\text{d} I_\text{q}` represents the reluctance torque, which is generated by different
d- and q-axis inductances.

The code is structured such that the ``inductance_analyzer`` contains the code for setting up and running the JMAG simulations based on 
1) the machine inputs and conditions of the user and 2) the conditions required of the machine to be able to calculate the 
necessary parameters. In the case of this machine, DC excitement of the U-phase is required with both the V- and W-phases being open. 
The post-analyzer script post-processes the .csv file generated to take the self-inductance of the U-phase coil and mutual-inductance of
the V-phase coil to calcualte :math:`L_\text{d}` and :math:`L_\text{q}`. This is done using the following equations:

.. math::

    L_\text{d} &= L_\text{ls} + \frac{3}{2}(L_\text{0} - L_\text{g}) \\
    L_\text{q} &= L_\text{ls} + \frac{3}{2}(L_\text{0} + L_\text{g}) \\

where :math:`L_\text{ls}` is the average value of the self leakage inductance, :math:`L_\text{0}` is the inductance component caused 
by the air-gap magnetic field, and :math:`L_\text{g}` is the the amplitude of self/mutual inductance variation due to saliency. More 
information and images depicting the relationships between these variables can be found using the reference at the conclusion of this 
paragraph. Together, both :math:`L_\text{d}` and :math:`L_\text{q}` can be used to find the saliency ratio, which is defined as:

.. math::

    \xi &= \frac{L_\text{d}}{L_\text{q}} \\

* X. Qiu, and W. Wang, and J. Yang, and J. Jiang, and J. Yang, "Phase-Inductance-Based Position Estimation Method for Interior Permanent Magnet Synchronous Motors," Energies 2017, 10, 2002.

This analyzer calculates :math:`L_\text{d}`, :math:`L_\text{q}`, and :math:`\xi` using JMAG's transient solver. It models a synchronous
reluctance machine under synchronous operation. The following document will provide a description of the analyzer inputs and outputs:

Input from User
*********************************

This analyzer is used in the same way as the ``SynR_JMAG_2D_FEA_Analyzer``. The inputs and initialization are the exact same and are shown
in the tables below:

.. csv-table:: `MachineDesign Input`
   :file: input_SynR_inductance_analyzer.csv
   :widths: 70, 70, 30
   :header-rows: 1

Example Code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Example code defining the flux linkage step is provided below. This code defines the analyzer problem class (input to the analyzer), 
initializes the analyzer class with an explanation of the required configurations, and calls the post-analyzer class. It should be noted
that the example below is used in conjunction with the ``flux_linkage`` analyzer:

.. code-block:: python

    import os
    import sys
    import copy

    from mach_eval import AnalysisStep, ProblemDefinition
    from mach_eval.analyzers.electromagnetic import inductance_analyzer as inductance

    ############################ Define Electromagnetic Step ###########################
    class SynR_Ind_ProblemDefinition(ProblemDefinition):
        """Converts a State into a problem"""

        def __init__(self):
            pass

        def get_problem(state):

            problem = inductance.Inductance_Problem(
                state.conditions.I_hat, state.conditions.path, state.conditions.study_name, state.conditions.time_step)
            return problem

    class SynR_Inductance_PostAnalyzer:
        
        def get_next_state(results, in_state):
            state_out = copy.deepcopy(in_state)

            state_out.conditions.Ld = results["Ld"]
            state_out.conditions.Lq = results["Lq"]
            state_out.conditions.saliency_ratio = results["Ld"]/results["Lq"]

            print("\n************************ INDUCTANCE RESULTS ************************")
            print("Ld = ", state_out.conditions.Ld, " H")
            print("Lq = ", state_out.conditions.Lq, " H")
            print("Saliency Ratio = ", state_out.conditions.saliency_ratio)
            print("*************************************************************************\n")

            return state_out

It should be noted that this code should be contained as an analysis step in the main folder of the eMach repository. It must be contained 
within the same folder as the code below in order for the code below to run.

Output to User
**********************************

The ``SynR_flux_linkage_analyzer`` returns a directory holding the results obtained from the transient analysis of the machine. The elements 
of this dictionary and their descriptions are provided below:

.. csv-table:: `SynR_inductance_analyzer Output`
   :file: output_SynR_inductance_analyzer.csv
   :widths: 70, 70
   :header-rows: 1

The following code should be used to run the example analysis:

.. code-block:: python

    import os
    import sys
    from time import time as clock_time

    os.chdir(os.path.dirname(__file__))
    sys.path.append("../../../")

    from mach_eval import (MachineEvaluator, MachineDesign)
    from SynR_flux_linkage_step import SynR_flux_linkage_step
    from SynR_inductance_step import SynR_inductance_step
    from example_SynR_machine import Example_SynR_Machine, Machine_Op_Pt

    ############################ Create Evaluator #####################
    SynR_evaluator = MachineEvaluator(
        [
            SynR_flux_linkage_step,
            SynR_inductance_step
        ]
    )

    design_variant = MachineDesign(Example_SynR_Machine, Machine_Op_Pt)

    tic = clock_time()
    results = SynR_evaluator.evaluate(design_variant)
    toc = clock_time()

    print("Time spent on SynR evaluation is %g min." % ((toc- tic)/60))

All example SynR evaluation scripts, including the one used for this analyzer, can be found in ``eMach\examples\mach_eval_examples\SynR_eval``,
where the post-analyzer script uses FEA results and calculates machine performance metrics, including torque density, power density, efficiency,
and torque ripple. This analyzer can be run by simply running the ``SynR_evaluator`` file in the aforementioned folder using the ``inductance_step``.

This example should produce the following results:

.. csv-table:: `SynR_inductance_analyzer Results`
   :file: results_SynR_inductance_analyzer.csv
   :widths: 70, 70, 30
   :header-rows: 1

It should be noted that the inductance values calculated will be dependent on the number of turns in the stator. The saliency ratio however will 
remain independent of this.